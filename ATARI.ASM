
;;MACLIB SWITCH
	MACLIB LIBATARI
	MACLIB FILES
	MACLIB PRINTER
	MACLIB GETPUT
;;	MACLIB SENDBOOT
	MACLIB OPTIONS
	MACLIB GENIO
	MACLIB RECORD
	MACLIB INSTALL
	MACLIB INSTALL2
	MACLIB MAPED
	MACLIB KEYBD
;;	MACLIB KEYBOOT

	ORG		100H
;;	MSWITCH

TRUE	EQU	0FFFFH
FALSE	EQU	NOT TRUE
HOME	EQU	FALSE  ; False when for other systems
DEBUGS	EQU	FALSE
AKEYBD	EQU	TRUE
KEYS	EQU	FALSE
KEYK	EQU	TRUE 
DEBUG2	EQU	FALSE
DISPLAY EQU	0E930H


	IF NOT	HOME
	JMP	IMINSTAL ; The installer will NOP this jump
	ENDIF

	CALL	IPRINT
 DB CR,LF,'      COPYRIGHT (C) 1982 by Vincent Cate.'
 DB CR,LF,'      All rights reserved.'
 DB CR,LF
 DB CR,LF,'If you find any reproducable bugs please call'
 DB CR,LF,'Vincent Cate at (408) 997-0264.'
 DB CR,LF,0

	LXI	SP,STACKTOP ;	
	CALL	GETDNUM	; Record what disk was in use
	CALL	SIZEMEM	; Find out how much memory is available
 IF	HOME		; ***** Next 2 lines only on our system
	MVI	A,40H
	STA	14H
 ENDIF		; ***** End of pequliarity
	CALL	INITKEY

ISERVATR LDA	ISKEYON
	CPI	'Y'
	JZ	HITCRAT
	CALL	IPRINT
	DB CR,LF,LF,'I am now serving the ATARI.'
	DB CR,LF,'Hit any key to see menu.',CR,LF,0
	JMP	GETHI
HITCRAT CALL	IPRINT
 DB CR,LF,'I am now serving the ATARI.'
 DB CR,LF,'Hit RETURN then the at sign @ to get menu.',CR,LF,0
			; JMP GETHI
			;
GETHI	LXI	SP,STACKTOP
	CALL	ASTATIN
	ORA	A
	JNZ	ASPEEKS	; When Atari SPEEKS we listen!!

	CALL	PSTAT
	ORA	A
	CNZ	NONEWB 	; CALL because used from allfull also

	CALL	ASTATIN
	ORA	A
	JNZ	ASPEEKS	; When Atari SPEEKS we listen!!

	CALL	CONST	;; my copy
	ORA	A	; 0 is no characters entered
	CNZ	BEENHIT	; A key has been hit. What does he want
			; CALLed because aslo used in GETPUT
 	JMP	GETHI	; round and round we go where we stop..

ASPEEKS	XRA	A
	STA	CHECKSUM ; So far the checksum is 0
	CALL	GETA
	CALL	ADDCHKSM ; 
	PUSH	PSW
	LDA	NUMLOST
	CPI	20
	JNC	IMLOST
	POP	PSW
	IF HOME
	STA	DISPLAY
	ENDIF
	IF KEYK
	CPI	'K'
	JZ	KEYBOARD
	ENDIF
DISKDRV CPI	'1'	; We will be one drive at a time
GODISK	JZ	DISK	; Changed when not supposed to be disk
	CPI	'1'	; Other drives ignored
	JZ	RDISK
	CPI	'2'
	JZ	RDISK
	CPI	'3'
	JZ	RDISK
	CPI	'4'
	JZ	RDISK

	CPI	40H	;	or the printer?
GOPRINT	JZ	PRINTER	;
;	CALL	PUTHEX	; It should not get to this line if
			;they only use the printer and disk
	LXI	H,NUMLOST
	INR	M	;; Increment NUMLOST
	JMP	GETHI	; go around again
			;
			;
EXIT	LDA	ISRECON
	CPI	'N'
	JZ	EXIT2
	JMP	NORMPRIN ;; Wish I could call it insted of JMP
			;; Now to exit with divert on
			;; someone will have to hit X twice
EXIT2	LDA	TYPEOPEN	; Did we read or write a file?
	CPI	0		; 0 for not open
	JZ	EXIT3
	CALL	CLOSE	; so not 0 (1 or 2) is open so close it
EXIT3	CALL	MAKEREAL
	JMP	0	; 
			;
DISK 	CALL	GETA	; What does it want the DISK to do?
	CALL	ADDCHKSM
	IF	HOME
	STA	DISPLAY+2
	ENDIF
	CPI	'S'	;
	JZ	STATUS	; give computer a status report
	CPI	'W'	;
	JZ	GET128	; IT WANTS TO WRITE SO GET A SECTOR
	CPI	'R'	;
	JZ	SEND128	;
	LXI	H,NUMLOST
	INR	M	;; Increment NUMLOST
	JMP	GETHI	; only 3 commands for files
			;
			;
STATUS	CALL	EAT3	; This puts first 2 into DAUX1 and 2
	CALL	ACK	; 
	LXI	D,STATMSG
	CALL	SENDSTR	; We say we are fine
	LDA	DAUX2	;
	CPI	'C'	; C for close
	JZ	ACLOSE	;
	CPI	'S'	;
	JZ	GETHI	;
	IF KEYS
	CPI	'K'
	JZ	KPOSTACK
	ENDIF
	IF HOME
	MVI	A,'S'
	CALL	PUTCHAR
	ENDIF
	LXI	H,NUMLOST
	INR	M	;; Increment NUMLOST
	JMP	GETHI	; 

ACLOSE	CALL	CLOSE
	MVI	C,'C'
	CALL	PUTC
	JMP	GETHI

IMLOST	POP	PSW
	LXI	H,LAST5
	MOV	M,A
	MVI	A,1
	STA	NUMOF5
LETSSINC CALL	ASTATIN
	JZ	LETSSINC
	CALL	AIN
	LXI	H,LAST5+4
	MOV	M,A
	LDA	NUMOF5
	INR	A
	STA	NUMOF5
	CPI	5
	JNC	GOT5	;; 5       or   more??????
MOV4DWN LXI	H,LAST5+1
	LXI	D,LAST5
	LXI	B,4
	CALL	BMOVER
	IF HOME
	MVI	A,'L'
	STA	DISPLAY-2
	ENDIF
	JMP	LETSSINC
GOT5	XRA	A
	STA	CHECKSUM
	LXI	H,LAST5+4
	MOV	B,M	;; possibly the sum sent
	DCX	H
	MVI	C,4
ADD4	MOV	A,M
	CALL	ADDCHKSM
	DCX	H
	DCR	C
	JNZ	ADD4
	LDA	CHECKSUM
	CMP	B	;; do other 4 add up to last one?
	JZ	IMSUNK
	MVI	A,4
	STA	NUMOF5
	JMP	MOV4DWN
IMSUNK	XRA	A
	STA	NUMLOST
	IF HOME
	MVI	A,' '
	STA	DISPLAY-2
	ENDIF
	JMP	GETHI

NUMOF5  DB 0
LAST5	DB 0,0,0,0,0,0




STATMSG DB 'C',10H,0FFH,0EFH,0,0FFH,'$'	; Just like real disk

	AMACS		; Now for the macros
	THE128S
	FILEMACS
;;	BOOTER
	MMENU
	IOMACS
	RECORDS
	PMACS
	VERTUOUS
	IF AKEYBD 
	NEWKEYS
;;	KBOOTER
	ENDIF


	;;Come here if ATARI asks for sector
			;;1,2, or 3
			;;
SBOOT	LXI	H,BOOT	;; The pointer to the begining of data
	LXI	D,128	;; DE is used to increment HL by 128
	LDA	DAUX1	;; Get sector number
SECNL	DCR	A
	JZ	SENDPREP ;;HL points to sec (DAUX1) of boot
	DAD	D	;; HL=HL+128
	JMP	SECNL

SENDPREP CALL IPRINT	;; I AM SENDING BOOT SECTOR # DAUX1
	DB CR,LF,'I am sending boot sector number  ',0
	LDA	DAUX1
	CALL	PUTHEX
	MVI	A,0	;; checksum is  so far
	STA	CHECKSUM
	MVI	D,128	;; send 128 bytes
SBOOTL  MOV	A,M	;;
	CALL  ADDCHKSM	;; Compute the check sum
	MOV	C,A	;; we are going to send the C
	CALL  PUTC	;; I told you we would send it
	INX	H		;; 
	DCR	D		;; only 128 now
	JNZ	SBOOTL	;;
	LDA	CHECKSUM
	MOV	C,A	;;
	CALL  PUTC	;; send the check sum
 	JMP	GETHI	;; next command

			;;
BOOT  DB 0		;;30	  .BYTE	;
 DB 3			;;40	  .BYTE 3
 DB 0H,7		;;50	  .WORD START
 DB 6H,7		;;60	  .WORD BPINIT
 DB 0A9H,0B9H  		;;70 BPINIT	LDA  #PND+132&255
 DB 8DH,0E7H,02 	;;80	  STA  MEMLO
 DB 8DH,0EH,00 	;;90	  STA  APPMHI
 DB 0A9H,8  		;;10	LDA  #PND+132/256
 DB 8DH,0E8H,02	;;110	STA  MEMLO+1
 DB 8DH,0FH,00	;;120	STA  APPMHI+1  
 DB 20H,01BH,7	;;130	JSR  PINIT
 DB 18H			;;140	CLC	
 DB 60H			;;150	RTS	
 DB 0A9H,044H  		;;180 PINIT  LDA  #'D	'
 DB 8DH,029H,03		;;190	STA  $329
 DB 0A9H,02BH  		;;20	LDA  #TAB&255  
 DB 8DH,02AH,03		;;210	STA  $32A
 DB 0A9H,7  		;;220	LDA  #TAB/256  
 DB 8DH,02BH,03		;;230	STA  $32B
 DB 60H			;;240	RTS	
 DB 46H,7  		;;480 TAB	.WORD OPEN-1
 DB 7FH,7  		;;490	.WORD CLOSE-1  
 DB 9AH,7  		;;50	.WORD GETBYTE-1
 DB 0FFH,7  		;;510	.WORD PUTBYTE-1
 DB 39H,7  		;;520	.WORD STAT-1
 DB 0DAH,7  		;;530	.WORD RET-1	; XIO
 DB 4CH,0DBH,7		;;540	JMP  RET	; INIT
 DB 0A9H,053H  		;;550 STAT	LDA  
 DB 8DH,0AH,03		;;560	STA  DAUX1
 DB 0A9H,053H  		;;570 STATMA LDA  #$53	;MINUS AUX
 DB 8DH,02H,03		;;580	STA  DCOMND
 DB 4CH,053H,0E4H	;;590	JMP  DSKIF
 DB 20H,066H,7		;;630 OPEN	JSR  DKSETUP
 DB 0A9H,04FH  		;;640	LDA  #'O ; O FOR OPEN
 DB 8DH,0BH,03		;;650	STA  DAUX2
 DB 8EH,7EH,7		;;660	STX  IOCBNUM
 DB 0BDH,044H,03	;;670	LDA  $344,X; POINTER NAME 
 DB 8DH,04H,03		;;680	STA  $304
 DB 0BDH,045H,03	;;690	LDA  $345H,0X
 DB 8DH,05H,03		;;70	STA  $305
 DB 20H,01EH,8		;;710	JSR  DBUFFL	; NAME 
 DB 0A9H,00  		;;715	LDA  #0
 DB 8DH,0AH,03		;;716	STA DAUX1
 DB 0A9H,033H  		;;720 DKSETUP LDA #DKBUF&255 ; 
 DB 8DH,04H,03		;;730	STA  $304
 DB 0A9H,8  		;;740	LDA  #DKBUF/256
 DB 8DH,05H,03		;;750	STA  $305
 DB 0A9H,01  		;;760	LDA  #1
 DB 8DH,01H,03		;;770	STA  $301
 DB 0A9H,058H  		;;780	LDA  #'X; NOT OPEN
 DB 8DH,0BH,03		;;790	STA  DAUX2
 DB 0EEH,0AH,03		;;795	INC  DAUX1	; 
 DB 60H			;;80	RTS	
 DB 0			;;810 IOCBNUM .BYTE	IOCB NUMBER 
 DB 0			;;820 HOWUSED .BYTE	;;
 DB 0ADH,7FH,7		;;830 CLOSE  LDA  HOWUSED
 DB 0C9H,052H  		;;840	CMP  #'R	; R = READ
 DB 0F0H,0CH  		;;850	BEQ  DONECLOS	; 
 DB 0A9H,01AH  		;;860 CLOSEL LDA  #$1A
 DB 20H,00H,8		;;870	JSR  PUTBYTE
 DB 0AEH,032H,8		;;880	LDX  DKBPNT
 DB 0E0H,00  		;;890	CPX  #0
 DB 0D0H,0F4H  		;;90	BNE  CLOSEL
 DB 0A9H,043H  		;;910 DONECLOS LDA #'C	'  ; C 
 DB 8DH,0BH,03		;;920	STA  DAUX2
 DB 4CH,03FH,7		;;930	JMP  STATMA	;
 DB 0A0H,052H  		;;940 GETBYTE LDY #'R	'
 DB 8CH,7FH,7		;;950	STY  HOWUSED
 DB 0AEH,032H,8		;;960	LDX  DKBPNT
 DB 0E0H,00  		;;970	CPX  #0
 DB 0D0H,0FH  		;;980	BNE  ISAB
 DB 0A9H,052H  		;;990	LDA  #'R	'
 DB 8DH,02H,03		;;100	STA  DCOMND
 DB 20H,066H,7		;;1010	JSR  DKSETUP
 DB 20H,053H,0E4H	;;1020	JSR  DSKIF
 DB 0C0H,01  		;;1025	CPY  #SUCCES
 DB 0D0H,027H  		;;1026	BNE  RETURN
 DB 0AEH,032H,8		;;1030 ISAB	LDX  DKBPNT
 DB 0BDH,033H,8		;;1040	LDA  DKBUFH,0X
 DB 0E8H			;;1050	INX	
 DB 0E0H,80H  		;;1060	CPX  #128
 DB 0D0H,02  		;;1070	BNE  SETDBPNT  
 DB 0A2H,00  		;;1080  LDX  #0 ; IF WAS 128 
 DB 8EH,032H,8		;;1090 SETDBPNT STX DKBPNT
 DB 20H,0E1H,7		;;110	JSR  WHATTYPE  
 DB 0C0H,7  		;;1110	CPY  #7	; GET BINARY
 DB 0F0H,0EH  		;;1120	BEQ  RET
 DB 0C9H,01AH  		;;1130	CMP  #$1A
 DB 0F0H,0DH  		;;1140	BEQ  EOF
 DB 0C9H,0DH  		;;1150	CMP  #$0D
 DB 0F0H,0C6H  		;;1160	BEQ  GETBYTE
 DB 0C9H,0AH  		;;1170	CMP  #$0A
 DB 0D0H,02  		;;1180	BNE  RET
 DB 0A9H,09BH  		;;1190	LDA  #$9B
 DB 0A0H,01  		;;120 RET	LDY  #SUCCES
 DB 060H		;;1210 RETURN RTS	
 DB 0A0H,88H  		;;1220 EOF	LDY  #$88
 DB 60H			;;1230	RTS	
 DB 0ACH,51H,0A0H	;;1240 WHATTYPE LDY $A051
 DB 0AEH,7EH,7		;;1241	LDX  IOCBNUM
 DB 0C0H,045H  		;;1242	CPY  #$45
 DB 0F0H,4  		;;1244	BEQ  ASMEDIT
 DB 0BCH,042H,03	;;1245	LDY  $342H,0X
 DB 60H			;;1260	RTS	
 DB 0E0H,020H  		;;1262 ASMEDIT CPX #$20
 DB 0F0H,03H  		;;1264	BEQ  OBJCODE
 DB 0A0H,03  		;;1265	LDY  #$3
 DB 60H			;;1266	RTS	
 DB 0A0H,0BH  		;;1267 OBJCODE LDY #11
 DB 60H			;;1268	RTS	
 DB 0A9H,0DH  		;;1270 EOL	LDA  #$0D
 DB 20H,00H,8	;;1280	JSR  PUTBYTE
 DB 0A9H,0AH  		;;1290	LDA  #$0A CPM NE 2 CHARS
 DB 0A0H,057H  		;;130 PUTBYTE LDY #'W ; W= WRITE
 DB 8CH,7FH,7	;;1310	STY  HOWUSED
 DB 20H,0E1H,7	;;1320	JSR  WHATTYPE  
 DB 0C0H,0BH  		;;1330	CPY  #11; PUT BINARY
 DB 0F0H,04  		;;1340	BEQ  PUTLIT
 DB 0C9H,09BH  		;;1350	CMP  #$9B
 DB 0F0H,0E9H  		;;1360	BEQ  EOL
 DB 0AEH,032H,8		;;1370 PUTLIT LDX  DKBPNT
 DB 9DH,033H,8		;;1380	STA  DKBUFH,0X
 DB 0E8H			;;1390	INX	
 DB 0E0H,80H  		;;140	CPX  #128
 DB 0D0H,011H  		;;1410	BNE  NOTFUL WAIT FOR FULL
 DB 20H,066H,7		;;1420	JSR  DKSETUP
 DB 0A9H,057H  		;;1430 DBUFFL  LDA #'W ; W FOR WRITE
 DB 8DH,02H,03		;;1440	STA  DCOMND
 DB 20H,053H,0E4H	;;1450	JSR  DSKIF
 DB 0C0H,01  		;;1455	CPY  #SUCCES
 DB 0D0H,0B3H  		;;1456	BNE  RETURN
 DB 0A2H,00  		;;1460	LDX  #0; NOW BUFFER EMPTY
 DB 8EH,032H,8		;;1470 NOTFUL STX  DKBPNT
 DB 0A0H,01  		;;1480	LDY  #SUCCES
 DB 60H			;;1490	RTS	
 DB 0			;;150 DKBPNT .BYTE	;;
 DB 0,0  		;;1520 DKBUF  .WORD 	;;



KBOOT	DB	0	;;30	.BYTE	0
 DB	05	;;40	.BYTE	5
 DB	0H,7	;;50	.W0RD	START
 DB	6,7	;;60	.W0RD	BPINIT
 DB	0A9H,75H	;;70	BPINIT	LDA	#PND&255
 DB	8DH,0E7H,2	;;80	STA	MEML0
 DB	8DH,0EH,0	;;90	STA	APPMHI
 DB	0A9H,9	;;10	LDA	#PND/256
 DB	8DH,0E8H,2	;;110	STA	MEML0+1
 DB	8DH,0FH,0	;;120	STA	APPMHI+1
 DB	0A9H,45H	;;130	LDA	#'E	'
 DB	8DH,20H,3	;;140	STA	$320
 DB	0A9H,0DCH	;;150	LDA	#ETAB&255
 DB	8DH,21H,3	;;160	STA	$321
 DB	0A9H,8	;;170	LDA	#ETAB/256
 DB	8DH,22H,3	;;180	STA	$322
 DB	0A9H,44H	;;190	LDA	#'D	'
 DB	8DH,29H,3	;;20	STA	$329
 DB	0A9H,36H	;;210	LDA	#TAB&255
 DB	8DH,2AH,3	;;220	STA	$32A
 DB	0A9H,7	;;230	LDA	#TAB/256
 DB	8DH,2BH,3	;;240	STA	$32B
 DB	18H	;;250	CLC
 DB	60H	;;260	RTS
 DB	051H,7	;;270	TAB	.W0RD	0PEN-1
 DB	090H,7	;;280	.W0RD	CL0SE-1
 DB	0ABH,7	;;290	.W0RD	GETBYTE-1
 DB	10H,8	;;30	.W0RD	PUTBYTE-1
 DB	44H,7	;;310	.W0RD	STAT-1
 DB	0EBH,7	;;320	.W0RD	RET-1	;	XI0
 DB	4CH,0ECH,7	;;330	JMP	RET	;	INIT
 DB	0A9H,53H	;;340	STAT	LDA	#'S
 DB	8DH,0AH,3	;;350	STA	DAUX1
 DB	0A9H,53H	;;360	STATMA	LDA	#$53	;
 DB	8DH,2H,3	;;370	STA	DC0MND
 DB	4CH,53H,0E4H	;;380	JMP	DSKIF
 DB	20H,71H,7	;;410	0PEN	JSR	DKSETUP
 DB	0A9H,4FH	;;420	LDA	#'0
 DB	8DH,0BH,3	;;430	STA	DAUX2
 DB	8EH,8FH,7	;;440	STX	I0CBNUM
 DB	0BDH,44H,3	;;450	LDA	$344H,X
 DB	8DH,4H,3	;;460	STA	$34
 DB	0BDH,45H,3	;;470	LDA	$345H,X
 DB	8DH,5H,3	;;480	STA	$305
 DB	20H,2FH,8	;;490	JSR	DBUFFL
 DB	0A9H,0	;;50	LDA	#0
 DB	8DH,0D0H,8	;;510	STA	LASTX1
 DB	0A9H,44H	;;520	DKSETUP	LDA	#DKBUF&255
 DB	8DH,4H,3	;;530	STA	$34
 DB	0A9H,8	;;540	LDA	#DKBUF/256
 DB	8DH,5H,3	;;550	STA	$305
 DB	0A9H,1	;;560	LDA	#1
 DB	8DH,1,3	;;570	STA	$31
 DB	0A9H,58H	;;580	LDA	#'X
 DB	8DH,0BH,3	;;590	STA	DAUX2
 DB	0EEH,0D0H,8	;;60	INC	LASTX1
 DB	0ADH,0D0H,8	;;610	LDA	LASTX1
 DB	8DH,0AH,3	;;620	STA	DAUX1
 DB	60H	;;630	RTS
 DB	0	;;640	I0CBNUM	.BYTE	;;
 DB	0	;;650	H0WUSED	.BYTE	0
 DB	0ADH,90H,7	;;660	CL0SE	LDA	H0WUSED
 DB	0C9H,52H	;;670	CMP	#'R
 DB	0F0H,0CH	;;680	BEQ	D0NECL0S
 DB	0A9H,1AH	;;690	CL0SEL	LDA	#$1A
 DB	20H,11H,8	;;70	JSR	PUTBYTE
 DB	0AEH,43H,8	;;710	LDX	DKBPNT
 DB	0E0H,0	;;720	CPX	#0
 DB	0D0H,0F4H	;;730	BNE	CL0SEL
 DB	0A9H,43H	;;740	D0NECL0S	LDA	#'C
 DB	8DH,0BH,3	;;750	STA	DAUX2
 DB	4CH,2FH,8	;;760	JMP	DBUFFL
 DB	0A0H,52H	;;770	GETBYTE	LDY	#'R	'
 DB	8CH,90H,7	;;780	STY	H0WUSED
 DB	0AEH,43H,8	;;790	LDX	DKBPNT
 DB	0E0H,0	;;80	CPX	#0
 DB	0D0H,0FH	;;810	BNE	ISAB
 DB	0A9H,52H	;;820	LDA	#'R	'
 DB	8DH,2H,3	;;830	STA	DC0MND
 DB	20H,71H,7	;;840	JSR	DKSETUP
 DB	20H,53H,0E4H	;;850	JSR	DSKIF
 DB	0C0H,1	;;860	CPY	#SUCCES
 DB	0D0H,27H	;;870	BNE	RETURN
 DB	0AEH,43H,8	;;880	ISAB	LDX	DKBPNT
 DB	0BDH,44H,8	;;890	LDA	DKBUFH,X
 DB	0E8H	;;90	INX
 DB	0E0H,80H	;;910	CPX	#128
 DB	0D0H,2	;;920	BNE	SETDBPNT
 DB	0A2H,0	;;930	LDX	#0
 DB	8EH,43H,8	;;940	SETDBPNT	STX	DKBPNT
 DB	20H,0F2H,7	;;950	JSR	WHATTYPE
 DB	0C0H,7	;;960	CPY	#7
 DB	0F0H,0EH	;;970	BEQ	RET
 DB	0C9H,1AH	;;980	CMP	#$1A
 DB	0F0H,0DH	;;990	BEQ	E0F
 DB	0C9H,0DH	;;10	CMP	#$0D
 DB	0F0H,0C6H	;;110	BEQ	GETBYTE
 DB	0C9H,0AH	;;120	CMP	#$0A
 DB	0D0H,2	;;130	BNE	RET
 DB	0A9H,9BH	;;140	LDA	#$9B
 DB	0A0H,1	;;1050	RET	LDY	#SUCCES
 DB	60H	;;160H	RETURN	RTS
 DB	0A0H,88H	;;170	E0F	LDY	#$88
 DB	60H	;;180	RTS
 DB	0ACH,51H,0A0H	;;1090	WHATTYPE	LDY	$A051
 DB	0AEH,8FH,7	;;110	LDX	I0CBNUM
 DB	0C0H,45H	;;1110	CPY	#$45
 DB	0F0H,4	;;1120	BEQ	ASMEDIT
 DB	0BCH,42H,3	;;1130	LDY	$342H,X
 DB	60H	;;1140	RTS
 DB	0E0H,20H	;;1150	ASMEDIT	CPX	#$20
 DB	0F0H,3	;;1160	BEQ	0BJC0DE
 DB	0A0H,3	;;1170	LDY	#$3
 DB	60H	;;1180	RTS
 DB	0A0H,0BH	;;1190	0BJC0DE	LDY	#11
 DB	60H	;;120	RTS
 DB	0A9H,0DH	;;1210	E0L	LDA	#$0D
 DB	20H,11H,8	;;1220	JSR	PUTBYTE
 DB	0A9H,0AH	;;1230	LDA	#$0A
 DB	0A0H,57H	;;1240	PUTBYTE	LDY	#'W
 DB	8CH,90H,7	;;1250	STY	H0WUSED
 DB	20H,0F2H,7	;;1260	JSR	WHATTYPE
 DB	0C0H,0BH	;;1270	CPY	#11
 DB	0F0H,4	;;1280	BEQ	PUTLIT
 DB	0C9H,9BH	;;1290	CMP	#$9B
 DB	0F0H,0E9H	;;130	BEQ	E0L
 DB	0AEH,43H,8	;;1310	PUTLIT	LDX	DKBPNT
 DB	09DH,44H,8	;;1320	STA	DKBUFH,X
 DB	0E8H	;;1330	INX
 DB	0E0H,80H	;;1340	CPX	#128
 DB	0D0H,11H	;;1350	BNE	N0TFUL
 DB	20H,71H,7	;;1360	JSR	DKSETUP
 DB	0A9H,57H	;;1370	DBUFFL	LDA	#'W
 DB	8DH,2H,3	;;1380	STA	DC0MND
 DB	20H,53H,0E4H	;;1390	JSR	DSKIF
 DB	0C0H,1	;;140	CPY	#SUCCES
 DB	0D0H,0B3H	;;1410	BNE	RETURN
 DB	0A2H,0	;;1420	LDX	#0
 DB	8EH,43H,8	;;1430	N0TFUL	STX	DKBPNT
 DB	0A0H,1	;;1440	LDY	#SUCCES
 DB	60H	;;1450	RTS
 DB	0	;;1460	DKBPNT	.BYTE
 DB	0	;;1470	DKBUF	.BYTE	"
 DB	0,0,0,0,0,0,0,0,0,0,31
 DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 DB	32,0,0,0,0,0,0,0,0,0,0
 DB	20,0,0,0,0,0,0,0,0,0,0,0
 DB	32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 DB	39,0,0,0,0,0,0
 DB	0,0,0,0,0,0,0,0,0,0,0
 DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 DB	0A9H,0DCH	;;1550	PINIT	LDA	#ETAB&255
 DB	8DH,21H,3	;;1560	STA	$321
 DB	0A9H,8	;;1570	LDA	#ETAB/256
 DB	8DH,22H,3	;;1580	STA	$322
 DB	0	;;1590	.BYTE
 DB	0FBH,0F3H	;;160	ETAB	.W0RD	E0PEN-1
 DB	0EBH,7	;;1610	.W0RD	RET-1	;	CL0SE
 DB	0EAH,8	;;1620	.W0RD	EGETBYTE-1
 DB	0A3H,0F6H	;;1630	.W0RD	EPUTBYTE-1
 DB	0EBH,7	;;1640	.W0RD	RET-1	;	STAT
 DB	0EBH,7	;;1650	.W0RD	RET-1	;	XI0
 DB	4CH,0ECH,7	;;1660	JMP	RET	;	INIT
 DB	20H,0B3H,0FCH	;;1680	EGETBYTE	JSR	SWAP
 DB	20H,88H,0FAH	;;1690	JSR	ERANGE
 DB	0ADH,6BH,0	;;170	LDA	BUFCNT
 DB	0D0H,2CH	;;1710	BNE	EGETC3
 DB	0ADH,54H,0	;;1720	LDA	R0WCRS
 DB 8DH,6CH,0	;;1730	STA	BUFSTR
 DB 0ADH,55H,0	;;1740	LDA	C0LCRS
 DB 8DH,6DH,0	;;1750	STA	BUFSTR+1
 DB 20H,28H,9	;;1760 EGETC1 JSR	KGETCH
 DB 8CH,4CH,0	;;1770	STY	DSTAT
 DB 0ADH,0FBH,2	;;1780	LDA	ATACHR 
 DB 0C9H,9BH	;;1790	CMP	#$9B
 DB 0F0H,16H	;;180	BEQ	EGETC2
 DB 20H,0ADH,0F6H	;;1810	JSR	D0SS
 DB 20H,0B3H,0FCH	;;1820	JSR	SWAP
 DB 0ADH,63H,0	;;1830	LDA	L0GC0L
 DB 0C9H,71H	;;1840	CMP	#113
 DB 0D0H,3	;;1850	BNE	EGETC6
 DB 20H,0AH,0F9H	;;1860	JSR	BELL
 DB 4CH,2H,09	;;1870 EGETC6 JMP	EGETC1
 DB 4CH,7CH,0F6H	;;1880 EGETC3 JMP	$F67C
 DB 4CH,6EH,0F6H	;;1890 EGETC2 JMP	$F66E
 DB 0A9H,4BH	;;190 KGETCH LDA	#'K	'
 DB 8DH,0H,3	;;1910	STA	DDEVIC
 DB 0A9H,1	;;1920	LDA	#1
 DB 8DH,1,3	;;1930	STA	DUNIT
 DB 8DH,2H,3	;;1940	STA	DC0MND
 DB 8DH,0BH,3	;;1950	STA	DAUX2
 DB 8DH,0AH,3	;;1960	STA	DAUX1
 DB 0A9H,40H	;;1970	LDA	#$40
 DB 8DH,3H,3	;;1980	STA	DSTATS 
 DB 0A9H,73H	;;1990	LDA	#KEY&255
 DB 8DH,4H,3	;;20	STA	$34
 DB 0A9H,9	;;210	LDA	#KEY/256
 DB 8DH,5H,3	;;220	STA	$305
 DB 0A9H,0FFH	;;230	LDA	#$FF
 DB 8DH,46H,2	;;240	STA	DSKTIM
 DB 8DH,6,3	;;2050	STA	DTIML0
 DB 0A9H,0	;;260H	LDA	#0
 DB 8DH,4DH,0	;;270	STA	ATRACT
 DB 8DH,9H,3	;;280	STA	$309
 DB 0A9H,1	;;2090	LDA	#1
 DB 8DH,8H,3	;;210	STA	$38
 DB 20H,65H,0E4H	;;2110	JSR	SI0INV
 DB 20H,59H,0E4H	;;2120	JSR	SI0V
 DB 0ADH,3H,3	;;2130	LDA	DSTATS
 DB 0C9H,1	;;2140	CMP	#SUCCES
 DB 0D0H,0BCH	;;2150	BNE	KGETCH
 DB 0ADH,73H,9	;;2160	LDA	KEY
 DB 8DH,0FBH,2	;;2170	STA	ATACHR
 DB 60H	;;2180	RTS
 DB 0,0




	 DS	0F0H	; Enough and to spare
STACKTOP EQU $
	IF HOME
	DW	STACKERR-1
STACKERR CALL	IPRINT
 DB CR,LF,LF,LF,'1 to maney returns !!!!!!!!!',0
	JMP	GETHI
	ENDIF
	IF NOT HOME
	DW	GETHI
	ENDIF
	IF NOT HOME
	INSTALER	; The lable DATA is in this
	DDTER		; let user do it all
	ENDIF

	IF HOME
DEVICE	DB	0
DATA	EQU	$
	ENDIF

	END	100H
